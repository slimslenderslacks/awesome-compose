{"cells":[{"kind":1,"language":"markdown","value":"# Compose Sample Application\n\n## NGINX Reverse Proxy -> WSGI -> Python/Flask Backend\n\nProject structure:\n\n```\n.\n├── compose.yaml\n├── flask\n│   ├── app.py\n│   ├── Dockerfile\n│   ├── requirements.txt\n│   └── wsgi.py\n└── nginx\n    ├── default.conf\n    ├── Dockerfile\n    ├── nginx.conf\n    └── start.sh\n\n```\n\n\n\n[*compose.yaml*](compose.yaml)"},{"kind":2,"language":"dockercompose","value":""},{"kind":1,"language":"markdown","value":"The compose file defines an application with two services `nginx-proxy` and `flask-app`.\nWhen deploying the application, docker compose maps port 80 of the web service container to port 80 of the host as specified in the file.\n\nMake sure port 80 on the host is not being used by another container, otherwise the port should be changed.\n\n## Deploy with docker compose"},{"kind":2,"language":"shellscript","value":"docker compose up -d"},{"kind":1,"language":"markdown","value":"## Expected result\n\nListing containers must show two containers running and the port mapping as below:"},{"kind":2,"language":"shellscript","value":"docker ps"},{"kind":1,"language":"markdown","value":"After the application starts, navigate to `http://localhost:80` in your web browser or run:"},{"kind":2,"language":"shellscript","value":"curl localhost:80"},{"kind":1,"language":"markdown","value":"Stop and remove the containers"},{"kind":2,"language":"shellscript","value":"docker compose down"},{"kind":1,"language":"markdown","value":"## About\n\nBy following the steps above, you will have an NGINX Reverse Proxy and a Flask backend. The general traffic flow will look like the following:\n\n`Client -> NGINX -> WSGI -> Flask`\n\n### NGINX\n\nWith this deployment model, we use NGINX to proxy and handle all requests to our Flask backend. This is a powerful deployment model as we can use NGINX to cache responses or even act as an application load balancer between multiple Flask backends. You could also integrate a Web Application Firewall into NGINX to protect your Flask backend from attacks.\n\n### WSGI\n\nWSGI (Web Server Gateway Interface) is the interface that sits in between our NGINX proxy and Flask backend. It is used to handle requests and interface with our backend. WSGI allows you to handle thousands of requests at a time and is highly scalable. In this `docker-compose` sample, we use Gunicorn for our WSGI.\n\n### Flask\n\nFlask is a web development framework written in Python. It is the \"backend\" which processes requests.\n\nA couple of sample endpoints are provided in this `docker-compose` example:\n\n* `/` - Returns a \"Hello World!\" string.\n* `/cache-me` - Returns a string which is cached by the NGINX reverse proxy. This demonstrates an intermediary cache implementation.\n* `/info` - Returns informational headers about the request. Some are passed from NGINX for added client visibility.\n"}]}