{"cells":[{"kind":1,"language":"markdown","value":"## Compose sample application: [ASP.NET](http://ASP.NET) with MS SQL server database\n\nProject structure:\n\n```\n.\n├── app\n│   ├── aspnetapp\n│   │   ├── appsettings.Development.json\n|   |   └── ...\n│   ├── ...\n│   └── Dockerfile\n└── compose.yaml\n\n```\n\n\n\n[*compose.yaml*](compose.yaml)"},{"kind":2,"language":"dockercompose","value":""},{"kind":1,"language":"markdown","value":"The compose file defines an application with two services `web` and `db`. The image for the web service is built with the Dockerfile inside the `app` directory (build parameter).\n\nWhen deploying the application, docker compose maps the container port 80 to port 80 of the host as specified in the file.\nMake sure port 80 on the host is not being used by another container, otherwise the port should be changed.\n\n> ℹ️ ***INFO***\nFor compatibility purpose between `AMD64` and `ARM64` architecture, we use Azure SQL Edge as database instead of MS SQL Server.\nYou still can use the MS SQL Server image by uncommenting the following line in the Compose file\n`#image: mcr.microsoft.com/mssql/server`\n\n## Deploy with docker compose"},{"kind":2,"language":"shellscript","value":"docker compose up -d"},{"kind":1,"language":"markdown","value":"## Expected result\n\nListing containers must show two containers running and the port mapping as below:"},{"kind":2,"language":"shellscript","value":"docker ps"},{"kind":1,"language":"markdown","value":"After the application starts, navigate to `http://localhost:80` in your web browser.\n\n<img src=\"output.jpg\" width=\"500\"/>\n\nStop and remove the containers"},{"kind":2,"language":"shellscript","value":"docker compose down"}]}